buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots"
        }
    }
    dependencies {
        classpath "eu.mihosoft.vrl.vlicense-header-util:VLicenseHeaderUtil:0.1-r2-SNAPSHOT"
        classpath "eu.mihosoft.vrl.vlicense-header-util.gradle:vlicense-header-plugin:0.1-r2-SNAPSHOT"
        classpath 'me.tatarka:gradle-retrolambda:3.2.5'
    }
}
plugins {
  id "com.github.johnrengelman.shadow" version "1.2.3"
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'maven'    
    apply plugin: 'signing'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    
    // apply vrl license header plugin
    if (!project.plugins.findPlugin(eu.mihosoft.vrl.vlicenseheaderutil.gradle.VLicenseHeaderPlugin)) {
        project.apply(plugin: eu.mihosoft.vrl.vlicenseheaderutil.gradle.VLicenseHeaderPlugin)
    }
    // license template (will be used as header in all Java source files)
    repairHeaders.licenseHeaderText = new File(projectDir,"../license-template.txt")

    repositories {
        mavenLocal()
        mavenCentral()
        maven { 
            url 'https://oss.sonatype.org/content/repositories/snapshots/' 
        }
        maven { 
            url "http://oss.sonatype.org/content/repositories/releases/" 
        }
    }

    signing {
        sign configurations.archives
    }
        
    signArchives.onlyIf {
        project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')
    }

    uploadArchives.onlyIf {
        project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')
    }

    uploadArchives {
        if (!project.hasProperty('sonatypeUsername') || !project.hasProperty('sonatypePassword')) {
              return
        }
        
        repositories.mavenDeployer {
            beforeDeployment { 
                MavenDeployment deployment -> signing.signPom(deployment) 
            }

            repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2') {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }

            snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots') {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }

            pom.project {
                artifactId   "${project.name}"
                name         "${project.name}"
                url          'http://jfxtras.org'
                description  'Miscellaneous components for JavaFX'
                packaging    'jar'
                licenses {
                    license {
                        name 'BSD'
                        url 'http://www.opensource.org/licenses/bsd-license.php'
                        distribution 'repo'
                    }
                }
                scm {
                    url 'scm:git@github.com:jfxtras/jfxtras.git'
                    connection 'scm:git@github.com:jfxtras/jfxtras.git'
                    developerConnection 'scm:git@github.com:jfxtras/jfxtras.git'
                }
                developers {
                    developer { name 'Tom Eugelink' }
                }
            }
        }
    }
}

project(':') {
	// these dependencies are needed to the shadow plugin knows what to include
    dependencies {
        compile project(':jfxtras-agenda')
        compile project(':jfxtras-common')
        compile project(':jfxtras-controls')
        compile project(':jfxtras-icalendarfx')
        compile project(':jfxtras-menu')
        compile project(':jfxtras-gauge-linear')
        compile project(':jfxtras-font-roboto')
    }
}

// configure shadowJar
shadowJar {
   classifier = null // do not append "-all", so the generated shadow jar replaces the existing jfxtras-all.jar (instead of generating jfxtras-all-all.jar)
}

subprojects {
	apply plugin: 'me.tatarka.retrolambda'
	retrolambda {
		defaultMethods true		
		javaVersion JavaVersion.VERSION_1_7
		oldJdk System.properties.'java.home'
		exclude 'Test'
	}

    //Excluding internal classes from Javadoc
    javadoc {
        exclude 'jfxtras/internal/*'
    }
    // all projects must be compatible with the java version specified here
    sourceCompatibility = '1.8'
    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    // Needed until Gradle supports class-scanning for Java 8
    tasks.withType(Test) {
        scanForTestClasses = false
        include "**/*Test.class"
        include "**/*Test1.class"
        exclude 'jfxtras/labs/test/JFXtrasGuiTest.class'
    }
    
    configurations {
        asciidoclet
    }
    
    dependencies {
        asciidoclet 'org.asciidoctor:asciidoclet:1.5.2'
    }
    
    javadoc {
        options.docletpath = configurations.asciidoclet.files.asType(List)
        options.doclet = 'org.asciidoctor.Asciidoclet'
    }

    task docJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from 'build/docs/javadoc'
    }

    task sourcesJar(type: Jar) {
        from sourceSets.main.allSource
        classifier = 'sources'
    }

    artifacts {
        archives jar
        archives docJar
        archives sourcesJar
    }
}

project(':jfxtras-agenda') {
    dependencies {
        compile project(':jfxtras-controls')
        compile project(':jfxtras-icalendarfx')
        testCompile project(':jfxtras-test-support')
    }
}

project(':jfxtras-common') {
    dependencies {
        testCompile project(':jfxtras-test-support')
    }
}

project(':jfxtras-controls') {
    dependencies {
        compile project(':jfxtras-common')
        compile project(':jfxtras-fxml')
        testCompile project(':jfxtras-test-support')
    }
}

project(':jfxtras-icalendarfx') {
    dependencies {
        testCompile project(':jfxtras-test-support')
    }
}

project(':jfxtras-menu') {
    dependencies {
        compile project(':jfxtras-common')
        testCompile project(':jfxtras-test-support')
    }
}

project(':jfxtras-gauge-linear') {
    dependencies {
        compile project(':jfxtras-common')
        testCompile project(':jfxtras-test-support')
    }
}

project(':jfxtras-font-roboto') {
    dependencies {
        testCompile project(':jfxtras-test-support')
    }
}

project(':jfxtras-test-support') {
    dependencies {
        compile 'junit:junit:4.12'
        compile 'org.mockito:mockito-all:1.9.5'
        compile 'org.loadui:testFx:3.1.2'
    }
}

// TODO: _lib folder per project?
task copyToLib(type: Copy) {
    into "_lib"
    from project(':jfxtras-test-support').configurations.testCompile
}
